$Id$
---------------------------------------------------------------------------

PREREQUISITES:
--------------

Before building this library, you'll need:

1. ant, version 1.6.5 or better, available at http://ant.apache.org/

2. The Java Mail API, which, in turn, requires the JavaBeans
   Activation Framework.
   See http://java.sun.com/products/javamail/ 
   and http://java.sun.com/products/javabeans/jaf/index.jsp

   This component is optional. See OPTIONAL COMPONENTS, below.

3. The following jars for the ASM bytecode manipulation library
   (http://asm.objectweb.org/):

   - asm-2.2.1.jar
   - asm-util-2.2.1.jar
   - asm-common-2.2.1.jar

   This component is optional. See OPTIONAL COMPONENTS, below.

PREPARATION:
------------

Place the jar files from steps #2 and #3, above, in a directory somewhere.
Then, in the source directory (the directory containing this API's "build.xml"
file), create a file called "build.properties", with the following line:

    third.party.jar.dir: /path/to/directory/containing/jars


BUILDING:
---------

1. Normal build:

   Type "ant build" in the top-level directory. The code will be compiled
   to the "build" subdirectory, and you'll get an "ocutil.jar" file in
   "build/lib".

   Note: The Ant build.xml file is configured to use the default Java
   compiler (usually "modern"). However, I usually build with Jikes
   (http://www-124.ibm.com/developerworks/oss/jikes/). To use Jikes, simply
   run Ant as follows:

	ant -Dbuild.compiler=jikes dist

   See the Ant manual entry for the <javac> task
   (http://ant.apache.org/manual/CoreTasks/javac.html) task for more
   information on the valid values for build.compiler.

2. Release build:

   To build the release distribution, use "ant release". This target builds
   the jar file and bundles the documentation and source into zip files. The
   results are written to version-stamped files in "build/release".

3. Building the graphical installer:

   You must first manually build the "release" target. Then, run
   "ant installer". The resulting installer jar file is written to
   "build/release".


POSSIBLE BUILD ERRORS:

1. If you see the following error:

BUILD FAILED
java.lang.UnsupportedClassVersionError: org/example/somepackage/SomeClass (Unsupported major.minor version 48.0)

   it usually means that you're compiling with a 1.2 or 1.3 JDK, and you're
   using a third-party jar that was built with a 1.4 or greater JDK.

   To solve this problem, either:

   a) Use a 1.4 JDK to build the org.clapper.util library,
   b) Get a copy of the third-party library that was built with an older JDK, 
      or
   c) Rebuild the third-party library from source (if possible), using the
      same JDK you want to use to build the org.clapper.util library

2. If you see this error during the build

	assertion "! array" failed: file "tuple.h", line 429

   you've encountered a jikes bug. I've seen this happen with jikes 1.21.
   Others on the net report the error with jikes 1.20.

   To solve this problem, either:

   a) Build with javac, not jikes
   b) Back off to an older version of jikes. (jikes 1.15 works fine for me.)


OPTIONAL COMPONENTS:
--------------------

A. Email support

The org.clapper.util library contains a set of classes that provide a
simplified front-end to the Java Mail API (in the org.clapper.mail
package). This package can only be built if the Java Mail API and the Java
Activation Framework are present.

B. Java Class Utilities

The org.clapper.util library contains a set of classes that operate on
compiled Java classes (in the org.clapper.classutil package). This package
requires the ASM bytecode manipulation library. If that library is not
present, the org.clapper.classutil package will be skipped in the build.


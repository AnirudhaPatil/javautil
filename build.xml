<!--
   Ant build file for clapper.org Java utility library

   $Id$
-->

<project name="util" default="all" basedir=".">
  <description>
    Build file for "util" Java classes
  </description>

  <!--
  ***************************************************************************
				Properties
  ***************************************************************************
  -->

  <property name="build" location="classes"/>
  <property name="dist"  location="dist"/>
  <property name="build.compiler" value="jikes"/>
  <property name="build.compiler.emacs" value="true"/>
  <property name="compile.listfiles" value="no"/>
  <property name="code_jarfile" value="rssget.jar"/>
  <property name="docs_zipfile" value="javadocs.zip"/>
  <property name="docs_top_dir" value="${dist}/docs"/>
  <property name="docs_api_dir" value="${docs_top_dir}/api"/>
  <property name="src_zipfile" value="src.zip"/>
  <property name="zip_dir_prefix" value="org/clapper/util/"/>

  <!--
  ***************************************************************************
			    Paths and Patterns
  ***************************************************************************
  -->

  <path id="project.class.path">
    <pathelement location="lib/"/>
    <pathelement path="${java.class.path}/"/>
    <pathelement path="classes/"/>
  </path>

  <patternset id="lib.sources">
    <include name="**/*.java"/>
    <exclude name="**/test/*.java"/>
  </patternset>

  <patternset id="lib.test.sources">
    <include name="**/test/*.java"/>
    <exclude name="mail/test/*.java"/>
  </patternset>

  <patternset id="mail.test.sources">
    <include name="mail/test/*.java"/>
  </patternset>

  <!--
  ***************************************************************************
			  Initialization Targets
  ***************************************************************************
  -->

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <depend srcdir="." destdir="${build}"/>
  </target>

  <!--
  ***************************************************************************
			       Code Targets
  ***************************************************************************
  -->

  <target name="testers" depends="lib,lib.testers,mail.testers"/>
  <target name="all" depends="lib,testers"/>

  <target name="misc" depends="init">
    <javac srcdir="." 
	   depend="true"
	   listfiles="${compile.listfiles}"
	   destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset>
        <include name="misc/*.java"/>
      </patternset>
    </javac>
  </target>

  <target name="io" depends="misc">
    <javac srcdir="." 
	   depend="true"
	   listfiles="${compile.listfiles}"
	   destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset>
        <include name="io/*.java"/>
      </patternset>
    </javac>
  </target>

  <target name="text" depends="io">
    <javac srcdir="." 
	   depend="true"
	   listfiles="${compile.listfiles}"
	   destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset>
        <include name="text/*.java"/>
      </patternset>
    </javac>
  </target>

  <target name="config" depends="text">
    <javac srcdir="." 
	   depend="true"
	   listfiles="${compile.listfiles}"
	   destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset>
        <include name="config/*.java"/>
      </patternset>
    </javac>
  </target>

  <!--
  Can only build the "mail" component if the Java Mail API and
  the Java Activation Framework are both in the CLASSPATH
  -->

  <target name="-check.jaf.exists">
    <available classname="javax.activation.DataSource" 
	       property="jaf.exists" value="true"/>
  </target>

  <target name="-check.javamail.exists" 
	  depends="-check.jaf.exists"
	  if="jaf.exists">
    <available classname="javax.mail.Session" 
	       property="javamail.exists" value="true"/>
  </target>

  <target name="-check.javamail" 
          depends="-check.javamail.exists"
          unless="javamail.exists">
    <echo>
*** Ant cannot find the Java Mail API and/or the Java Activation Framework,
*** so, all components that require those packages will be skipped. To enable
*** those components, install the Java Mail API and Java Activation Framework,
*** and make them available in your CLASSPATH. Both packages can be found
*** at http://java.sun.com/
    </echo>
  </target>

  <target name="mail" depends="-check.javamail,text" if="javamail.exists">
    <javac srcdir="." 
	   depend="true"
	   listfiles="${compile.listfiles}"
	   destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset>
        <include name="mail/*.java"/>
      </patternset>
    </javac>
  </target>

  <target name="lib" depends="misc,io,text,config,mail">
  </target>

  <target name="mail.testers" depends="-check.javamail,lib"
          if="javamail.exists"
	  description="compile the mail testers">
    <!-- Create the distribution directory -->
    <javac srcdir="." 
	   depend="true"
	   listfiles="${compile.listfiles}"
	   destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset refid="mail.test.sources"/>
    </javac>
  </target>

  <target name="lib.testers" depends="lib"
	  description="compile the testers">
    <!-- Create the distribution directory -->
    <javac srcdir="." 
	   depend="true"
	   listfiles="${compile.listfiles}"
	   destdir="${build}">
      <classpath refid="project.class.path"/>
      <patternset refid="lib.test.sources"/>
    </javac>
  </target>

  <!--
  ***************************************************************************
			      Javadoc targets
  ***************************************************************************
  -->

  <target name="doc"
          description="Generate API Javadocs">
    <mkdir dir="dist/docs/api"/>
    <javadoc 
             destdir="dist/docs/api"
	     sourcepath="../../.."
             author="true"
             version="true"
	     splitindex="true"
             use="true"
	     overview="overview.html"
	     excludepackagenames="org.clapper.util.*.test"
	     packagenames="org.clapper.util.*"
	     classpathref="project.class.path"
             windowtitle="clapper.org Utility API">
      <doctitle><![CDATA[<h1>clapper.org Utility API Documentation</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2004 Brian M. Clapper. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>

  <target name="docs" depends="doc"/>
  <target name="javadocs" depends="doc"/>

  <!--
  ***************************************************************************
			     Packaging Targets
  ***************************************************************************
  -->

  <target name="dist" depends="all"
          description="Generate the distribution">
    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <mkdir dir="${dist}/lib"/>
    <jar jarfile="${dist}/lib/${code_jarfile}" basedir="${build}"/>
  </target>

  <target name="doczip" depends="doc"
          description="Builds the javadocs zip file">
    <mkdir dir="${dist}"/>
    <zip destfile="${dist}/${docs_zipfile}">
      <zipfileset dir="${docs_top_dir}"
                  prefix="${zip_dir_prefix}"/>
    </zip>
  </target>

  <target name="srczip" depends="clean"
          description="Generate the source jar">
    <mkdir dir="${dist}"/>
    <zip destfile="${dist}/${src_zipfile}">
      <zipfileset dir="." 
                  includes="**/*.java,**/*.html,**/*.xml"
                  excludes="**/CVS,${dist}/**,${build}/*"
                  prefix="${zip_dir_prefix}"/>
    </zip>
  </target>

  <target name="fulldist" depends="srczip,doczip,dist"
          description="Generate the distribution and source jars"/>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${build}" failonerror="false" includeEmptyDirs="true"/>
    <delete dir="${dist}/lib" failonerror="false" includeEmptyDirs="true"/>
    <delete dir="${dist}" failonerror="false" includeEmptyDirs="true"/>
  </target>
</project>

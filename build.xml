<!--
  Ant build file for clapper.org Java utility library

  $Id$
  ===========================================================================
  This software is released under a Berkeley-style license:

  Copyright (c) 2004-2005 Brian M. Clapper. All rights reserved.

  Redistribution and use in source and binary forms are permitted provided
  that: (1) source distributions retain this entire copyright notice and
  comment; and (2) modifications made to the software are prominently
  mentioned, and a copy of the original software (or a pointer to its
  location) are included. The name of the author may not be used to endorse
  or promote products derived from this software without specific prior
  written permission.

  THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
  WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  Effectively, this means you can do what you want with the software except
  remove this notice or take advantage of the author's name. If you modify
  the software and redistribute your modified version, you must indicate that
  your version is a modification of the original, and you must provide either
  a pointer to or a copy of the original.
-->

<project name="util" default="all" basedir=".">
  <description>
    Build file for "util" Java classes
  </description>

  <!--
  ***************************************************************************
                                Properties
  ***************************************************************************
  -->

  <property name="build" location="classes"/>
  <property name="pkg.path" value="org/clapper/util"/>
  <property name="src.top" location="src"/>
  <property name="src.dir" location="${src.top}/${pkg.path}"/>

  <!--
       <javac> uses a different source directory to prevent constant
       recompilation. See "http://ant.apache.org/faq.html#always-recompiles"
       for details.
  -->
  <property name="javac.src.dir" location="${src.top}"/>
  <property name="dist"  location="dist"/>
  <property name="javac.debug" value="true"/>
  <property name="javac.listfiles" value="no"/>
  <property name="javac.source" value="1.5"/>
  <property name="javac_lint_unchecked_opt" value="-Xlint:unchecked"/>
  <property name="javac_lint_deprecation_opt" value="-Xlint:deprecation"/>
  <property name="build.info.file"
            value="${build}/org/clapper/util/misc/BuildInfoBundle.properties"/>
  <property name="code_jar_name" value="ocutil"/>
  <property name="code_jar_file" value="${code_jar_name}.jar"/>
  <property name="code_jar_path" value="${dist}/lib/${code_jar_file}"/>
  <property name="docs_top_dir" value="${dist}/docs"/>
  <property name="docs_api_dir" value="${docs_top_dir}/api"/>
  <property name="zip_dir_prefix" value="util/"/>
  <property name="release_dir" value="${dist}/release"/>

  <!--
  ***************************************************************************
                            Paths and Patterns
  ***************************************************************************
  -->

  <path id="project.class.path">
    <pathelement location="lib/"/>
    <pathelement path="${java.class.path}/"/>
    <pathelement path="classes/"/>
  </path>

  <!--
  ***************************************************************************
                          Initialization Targets
  ***************************************************************************
  -->

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp>
      <format property="build.date" pattern="dd MMMM, yyyy HH:mm:ss z"
              locale="en"/>
    </tstamp>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <depend srcdir="${src.dir}" destdir="${build}"/>
  </target>

  <!--
  ***************************************************************************
                               Code Targets
  ***************************************************************************
  -->

  <target name="all" depends="init,lib,bundles,-build.info,testers"/>

  <target name="bundles">
    <copy todir="${build}">
      <fileset dir="${src.top}">
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="testers" depends="lib,lib.testers,mail.testers"/>
  <target name="lib" depends="lib.unconditional,lib.conditional"/>

  <target name="lib.unconditional" depends="init">
    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           debug="${javac.debug}"
           listfiles="${javac.listfiles}"
           deprecation="yes"
           destdir="${build}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac_lint_unchecked_opt}"/>
      <!--
      <compilerarg compiler="javac1.5" value="${javac_lint_deprecation_opt}"/>
      -->

      <classpath refid="project.class.path"/>

      <include name="**/*.java"/>
      <exclude name="${pkg.path}/mail/*.java"/>
      <exclude name="**/test/*.java"/>

    </javac>
  </target>

  <target name="lib.conditional" depends="mail"/>

  <!--
  Can only build the "mail" component if the Java Mail API and
  the Java Activation Framework are both in the CLASSPATH
  -->

  <target name="-check.javamail.exists">
    <condition property="javamail.exists">
      <and>
        <available classname="javax.activation.DataHandler"/>
        <available classname="javax.mail.Transport"/>
      </and>
    </condition>
  </target>

  <target name="-check.javamail"
          depends="-check.javamail.exists"
          unless="javamail.exists">
    <echo>
*** Ant cannot find the Java Mail API and/or the Java Activation Framework,
*** so, all components that require those packages will be skipped. To enable
*** those components, install the Java Mail API and Java Activation Framework,
*** and make them available in your CLASSPATH. Both packages can be found
*** at http://java.sun.com/
    </echo>
  </target>

  <target name="mail" depends="-check.javamail" if="javamail.exists">
    <echo level="verbose">Found Java Mail API. Compiling mail classes.</echo>
    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           debug="${javac.debug}"
           listfiles="${javac.listfiles}"
           deprecation="yes"
           destdir="${build}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac_lint_unchecked_opt}"/>
      <!--
      <compilerarg compiler="javac1.5" value="${javac_lint_deprecation_opt}"/>
      -->

      <classpath refid="project.class.path"/>

      <include name="${pkg.path}/mail/*.java"/>
    </javac>
  </target>

  <!-- Load the API version from the appropriate resource bundle -->

  <target name="-get.version" description="Get the version stamp">
    <property file="${build}/org/clapper/util/misc/Bundle.properties"/>
    <echo>API Version: ${api.version}</echo>
  </target>

  <target name="version" depends="-get.version"/>

  <target name="-build.info" depends="-get.version"
          description="Create build info properties file">

    <taskdef name="make_build_info"
             classname="org.clapper.util.ant.MakeBuildInfoTask"
             classpath="${build}"/>

    <condition property="compiler" value="${build.compiler}">
      <isset property="build.compiler"/>
    </condition>

    <condition property="compiler" value="javac">
      <not>
        <isset property="build.compiler"/>
      </not>
    </condition>

    <make_build_info file="${build.info.file}"
                     antversion="${ant.version}"
                     compiler="${compiler}"/>
  </target>

  <target name="mail.testers" depends="-check.javamail,lib"
          if="javamail.exists"
          description="compile the mail testers">
    <!-- Create the distribution directory -->
    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           debug="${javac.debug}"
           listfiles="${javac.listfiles}"
           deprecation="yes"
           destdir="${build}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac_lint_unchecked_opt}"/>
      <!--
      <compilerarg compiler="javac1.5" value="${javac_lint_deprecation_opt}"/>
      -->

      <classpath refid="project.class.path"/>

      <include name="${pkg.path}/mail/test/*.java"/>

    </javac>
  </target>

  <target name="lib.testers"
          description="compile the testers">
    <!-- Create the distribution directory -->
    <javac srcdir="${javac.src.dir}"
           source="${javac.source}"
           debug="${javac.debug}"
           listfiles="${javac.listfiles}"
           destdir="${build}">

      <compilerarg compiler="jikes" value="+Peffective-java"/>
      <compilerarg compiler="jikes" value="+Punused-type-imports"/>
      <compilerarg compiler="jikes" value="+Punused-package-imports"/>
      <compilerarg compiler="jikes" value="+Pmodifier-order"/>
      <compilerarg compiler="jikes" value="+Pserial"/>

      <compilerarg compiler="javac1.5" value="${javac_lint_unchecked_opt}"/>
      <!--
      <compilerarg compiler="javac1.5" value="${javac_lint_deprecation_opt}"/>
      -->

      <classpath refid="project.class.path"/>

      <include name="**/test/*.java"/>
      <exclude name="${pkg.path}/mail/test/*.java"/>

    </javac>
  </target>

  <!--
  ***************************************************************************
                              Javadoc targets
  ***************************************************************************
  -->

  <target name="doc"
          description="Generate API Javadocs">
    <mkdir dir="dist/docs/api"/>
    <javadoc
             destdir="dist/docs/api"
             sourcepath="${src.top}"
             source="${javac.source}"
             author="true"
             version="true"
             breakiterator="true"
             splitindex="true"
             use="true"
             overview="overview.html"
             excludepackagenames="org.clapper.util.*.test"
             packagenames="org.clapper.util.*"
             classpathref="project.class.path"
             windowtitle="clapper.org Utility API">
      <doctitle><![CDATA[<h1>clapper.org Utility API Documentation</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2004 Brian M. Clapper. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>

  <target name="docs" depends="doc"/>
  <target name="javadocs" depends="doc"/>

  <!--
  ***************************************************************************
                             Packaging Targets
  ***************************************************************************
  -->

  <target name="-set.version.properties" depends="-get.version">
    <property name="versioned_src_zipfile"
              value="src-${api.version}.zip"/>

    <property name="versioned_code_jar_file"
              value="${code_jar_name}-${api.version}.jar"/>

    <property name="versioned_docs_zipfile"
              value="javadocs-${api.version}.zip"/>
  </target>

  <target name="code.jar" depends="all"
          description="Generate the distribution">
    <mkdir dir="${dist}/lib"/>
    <jar jarfile="${code_jar_path}" basedir="${build}"/>
  </target>
  <target name="dist" depends="code.jar"/>

  <target name="-doczip" depends="doc"
          description="Builds the javadocs zip file">
    <mkdir dir="${release_dir}"/>
    <zip destfile="${release_dir}/${versioned_docs_zipfile}">
      <zipfileset dir="${docs_top_dir}"
                  prefix="${zip_dir_prefix}"/>
    </zip>
  </target>

  <target name="-srczip" depends=""
          description="Generate the source zip">
    <mkdir dir="${release_dir}"/>
    <zip destfile="${release_dir}/${versioned_src_zipfile}">
      <!--
          WARNING: This file set is essentially duplicated in the installer's
          config file, below. There's no way around that, unfortunately.
      -->
      <zipfileset dir="." prefix="${zip_dir_prefix}" casesensitive="yes">
        <exclude name="${dist}/**"/>
        <exclude name="${build}"/>
        <exclude name="**/CVS"/>
        <include name="**/*.java"/>
        <include name="**/package.html"/>
        <include name="overview.html"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      </zipfileset>
    </zip>
  </target>

  <target name="fulldist"
          depends="dist,-set.version.properties,-srczip,-doczip"
          description="Generate the distribution and source jars">
    <copy file="${code_jar_path}"
          tofile="${release_dir}/${versioned_code_jar_file}"/>
  </target>

  <!--
  ***************************************************************************
                             Installer Target
  ***************************************************************************
  -->

  <!--
      If you're going to build the installer, you'll need the IzPack
      utility (http://www.izforge.com/izpack/), and you'll have to set
      this value to the location of the IzPack installation.
  -->
  <property name="izpack.home" value="/usr/local/java/IzPack"/>
  <property name="src.install" value="${src.top}/installer"/>

  <target name="installer"
          depends="-set.version.properties">

    <!-- Define the IzPack task -->

    <taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask"/>

    <!-- Create a temporary installation directory -->

    <property name="install.tmp" location="${dist}/install"/>
    <mkdir dir="${install.tmp}"/>

    <!--
        Copy the LICENSE file and "unwrap" it so it's not wrapped weirdly
        in the installer's License GUI screen. Oddly enough, this isn't an
        issue with the README file
    -->

    <copy todir="${install.tmp}" file="LICENSE"/>

    <!-- First, replace all double newlines with "@@@@" -->
    <replace dir="${install.tmp}">
      <include name="LICENSE"/>

      <replacetoken><![CDATA[

]]></replacetoken>
      <replacevalue>@@@@</replacevalue>
    </replace>

    <!-- Next, replace single newlines with blanks -->
    <replace dir="${install.tmp}">
      <include name="LICENSE"/>

      <replacetoken><![CDATA[
]]></replacetoken>
      <replacevalue> </replacevalue>
    </replace>

    <!-- Finally, restore the double newlines -->
    <replace dir="${install.tmp}">
      <include name="LICENSE"/>
      <replacetoken>@@@@</replacetoken>
      <replacevalue><![CDATA[

]]></replacevalue>
    </replace>

    <!-- Build the installer -->

    <izpack output="${release_dir}/install-ocutil-${api.version}.jar"
            installerType="standard"
            basedir="."
            izPackDir="${izpack.home}">
      <config><![CDATA[
<installation version="1.0">
  <info>
    <appname>clapper.org Java Utility Library</appname>
    <appversion>@{curn.version}</appversion>
    <appsubpath>ocutil</appsubpath>
    <authors>
      <author name="Brian Clapper" email="bmc@clapper.org"/>
    </authors>
    <url>http://www.clapper.org/software/java/util/</url>
    <javaversion>1.5</javaversion>
  </info>

  <guiprefs width="800" height="600" resizable="no"/>

  <locale>
    <langpack iso3="eng"/>
  </locale>

  <resources>
    <res id="LicencePanel.licence" src="@{install.tmp}/LICENSE"/>
    <res id="Installer.image" src="@{src.install}/clapper-logo.png"/>
    <res id="ProcessPanel.Spec.xml" src="@{src.install}/cleanup.xml"/>
  </resources>

  <panels>
    <panel classname="HelloPanel"/>
    <!--
    <panel classname="InfoPanel"/>
    -->
    <panel classname="LicencePanel"/>
    <panel classname="TargetPanel"/>
    <panel classname="PacksPanel"/>
    <panel classname="InstallPanel"/>
    <panel classname="ProcessPanel"/>
    <panel classname="FinishPanel"/>
  </panels>

  <packs>
    <pack name="Base" required="yes">
      <description>The jar file</description>
      <file src="LICENSE" targetdir="$INSTALL_PATH"/>
      <file src="@{release_dir}/@{versioned_code_jar_file}"
            targetdir="$INSTALL_PATH"/>

      <!-- for cleaning up -->

      <singlefile src="@{src.top}/installer/cleanup.sh"
                  target="$INSTALL_PATH/scripts/cleanup.sh">
        <os family="unix"/>
      </singlefile>
      <parsable targetfile="$INSTALL_PATH/scripts/cleanup.sh">
        <os family="unix"/>
      </parsable>
      <executable targetfile="$INSTALL_PATH/scripts/cleanup.sh"
                  stage="never" os="unix"/>

      <singlefile src="@{src.top}/installer/cleanup.bat"
                  target="$INSTALL_PATH/scripts/cleanup.bat">
        <os family="windows"/>
      </singlefile>
      <parsable targetfile="$INSTALL_PATH/scripts/cleanup.bat">
        <os family="windows"/>
      </parsable>
      <executable targetfile="$INSTALL_PATH/scripts/cleanup.bat" stage="never"
                  os="windows"/>
    </pack>

    <pack name="Docs" required="no">
      <description>The API Javadocs</description>
      <file src="dist/docs/api"
            targetdir="$INSTALL_PATH/docs"/>
      <file src="docs/CHANGELOG"
            targetdir="$INSTALL_PATH/docs"/>
    </pack>

    <pack name="Sources" required="no">
      <description>The sources</description>
      <!--
          WARNING: This file set is essentially a duplicate of the
          sources <zipfileset>, earlier in this file. There's no
          way around that, unfortunately.

          KLUDGE: For some reason, the IzPack <fileset> element doesn't
          properly include properties files with @{src.top}/**/*.properties,
          and exclusion via @{build} doesn't work, either. (It's not quite
          like the Ant <fileset>, no matter what the docs say.) So, we'll
          clean up the incorrectly copied build directory in the final panel.
      -->
      <fileset dir="." targetdir="$INSTALL_PATH/sources">
        <include name="**/*.java"/>
        <include name="**/package.html"/>
        <include name="overview.html"/>
        <include name="build.xml"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
        <exclude name="@{dist}/**"/>
        <exclude name="@{build}/**/*.properties"/>
        <exclude name="**/CVS"/>
      </fileset>
    </pack>
  </packs>
</installation>
      ]]></config>
    </izpack>

    <delete dir="${install.tmp}"/>
  </target>

  <!--
  ***************************************************************************
                             Clean-up Targets
  ***************************************************************************
  -->

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->

    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${build}"/>
    </delete>

    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${dist}"/>
    </delete>

    <delete dir="${install.tmp}"/>
  </target>
</project>
